# PostgreSQL MCP Server - Environment Configuration Example
# Copy this file to .env and configure with your actual values

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# Database Profile Selection
# Set DB_PROFILE to 'local' for local CMDB or 'external' for external database
DB_PROFILE=local

# LOCAL DATABASE - CMDB Configuration (default)
LOCAL_PGHOST=localhost
LOCAL_PGPORT=5432
LOCAL_PGDATABASE=cmdb
LOCAL_PGUSER=mcp_user
LOCAL_PGPASSWORD=mcp_password
# Alternative connection string for local
LOCAL_DATABASE_URL=postgresql://mcp_user:mcp_password@localhost:5432/cmdb

# EXTERNAL DATABASE Configuration
# Uncomment and configure these for external database access
#EXTERNAL_PGHOST=your-external-host.com
#EXTERNAL_PGPORT=5432
#EXTERNAL_PGDATABASE=your_database_name
#EXTERNAL_PGUSER=your_username
#EXTERNAL_PGPASSWORD=your_password
# Alternative connection string for external (with SSL)
#EXTERNAL_DATABASE_URL=postgresql://username:password@external-host.com:5432/database_name?sslmode=require

# Legacy environment variables (will use DB_PROFILE to determine source)
# These are set automatically based on DB_PROFILE selection
PGHOST=localhost
PGPORT=5432
PGDATABASE=cmdb
PGUSER=mcp_user
PGPASSWORD=mcp_password
DATABASE_URL=postgresql://mcp_user:mcp_password@localhost:5432/cmdb

# =============================================================================
# MCP SERVER CONFIGURATION
# =============================================================================

# MCP Server Transport Configuration
# Choose between "stdio" (standard input/output) or "http" (HTTP server)
MCP_TRANSPORT=stdio

# HTTP Transport Configuration (only used when MCP_TRANSPORT=http)
# Host to bind the MCP server to
MCP_HOST=0.0.0.0

# Port for the MCP HTTP server
MCP_PORT=8080

# Additional HTTP transport options
# MCP_HTTP_TIMEOUT=30
# MCP_HTTP_MAX_CONNECTIONS=100

# =============================================================================
# AI MODEL PROVIDER CONFIGURATION
# =============================================================================

# AI Model Provider Selection
# Choose between "openai" (openai.com) or "azure" (Azure OpenAI)
# IMPORTANT: Restart the application after changing this setting
AI_PROVIDER=openai

# -----------------------------------------------------------------------------
# OPTION 1: OpenAI.com Configuration
# -----------------------------------------------------------------------------
# Use these settings when AI_PROVIDER=openai

# Your OpenAI API key from https://platform.openai.com/api-keys
OPENAI_API_KEY=sk-your-actual-openai-api-key-here

# Model to use (e.g., gpt-4o, gpt-4-turbo, gpt-3.5-turbo)
OPENAI_MODEL=gpt-4o

# OpenAI API base URL (usually no need to change)
OPENAI_BASE_URL=https://api.openai.com/v1

# -----------------------------------------------------------------------------
# OPTION 2: Azure OpenAI Configuration
# -----------------------------------------------------------------------------
# Use these settings when AI_PROVIDER=azure

# Your Azure OpenAI resource API key
AZURE_OPENAI_API_KEY=your-azure-openai-api-key-here

# Your Azure OpenAI resource endpoint URL
# Format: https://your-resource-name.openai.azure.com/
AZURE_OPENAI_ENDPOINT=https://your-resource-name.openai.azure.com/

# Azure OpenAI API version (recommended: 2024-10-21)
AZURE_OPENAI_API_VERSION=2024-10-21

# Your model deployment name in Azure (created in Azure AI Studio)
AZURE_OPENAI_DEPLOYMENT_NAME=gpt-4o

# The underlying model (for reference/documentation)
AZURE_OPENAI_MODEL=gpt-4o

# =============================================================================
# USAGE INSTRUCTIONS
# =============================================================================

# 1. Copy this file to .env:
#    cp .env.example .env

# 2. Configure your database settings (if not using default CMDB)

# 3. Choose your MCP transport method:
#    - stdio (default): Uses standard input/output (recommended for local development)
#    - http: Runs MCP server as HTTP service (useful for remote access)

# 4. Choose your AI provider:
#    - For OpenAI.com: Set AI_PROVIDER=openai and configure OPENAI_* variables
#    - For Azure OpenAI: Set AI_PROVIDER=azure and configure AZURE_OPENAI_* variables

# 5. Add your actual API keys (never commit these to version control!)

# 6. Start the application:
#    uv run streamlit run streamlit_openai_mcp.py

# =============================================================================
# SECURITY NOTES
# =============================================================================

# - Never commit .env files to version control
# - Keep your API keys secure and rotate them regularly  
# - Use environment-specific .env files for different deployments
# - Consider using Azure Key Vault or similar for production secrets